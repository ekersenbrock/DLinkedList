#BlueJ class context
comment0.target=DLCList
comment0.text=\r\n\ A\ doubly\ lined\ list\ is\ a\ collection\ in\ which\ every\ cell\ holds\ a\ reference\ \r\n\ to\ the\ adjacent\ cells.\ The\ first\ cell\ has\ a\ reference\ to\ the\ last\ and\ \r\n\ second\ cell.\ The\ last\ cell\ holds\ a\ reference\ to\ the\ the\ second\ to\ last\ cell\ and\r\n\ the\ first\ cell.\ The\ starting\ node\ is\ the\ only\ node\ that\ is\ referenced\ and\ \r\n\ its\ index\ number\ is\ one.\r\n\r\n\ @author\ Erik\ K\r\n\ @version\ 5/30/2020\r\n
comment1.params=
comment1.target=DLCList()
comment1.text=\r\n\ Constructs\ an\ empty\ doubly\ linked\ circular\ list.\r\n
comment10.params=
comment10.target=void\ clear()
comment10.text=\r\n\ Start\ with\ a\ new\ null\ list.\r\n
comment11.params=object
comment11.target=boolean\ contains(java.lang.Object)
comment11.text=\r\n\ Returns\ a\ true\ if\ the\ list\ contains\ the\ objet\ parameter.\r\n\ @param\ object\ An\ object\ for\ comparison.\r\n
comment12.params=index
comment12.target=java.lang.Object\ get(int)
comment12.text=\r\n\ Returns\ data\ stored\ in\ the\ given\ index.\r\n\ @param\ index\ The\ index\ to\ be\ returned.\r\n\ @returns\ The\ stored\ data.\r\n
comment13.params=
comment13.target=java.lang.Object\ getFirst()
comment13.text=\r\n\ Returns\ the\ contents\ of\ the\ first\ node\ of\ this\ list.\r\n\ @return\ The\ data\ stored\ in\ the\ first\ node.\r\n\ @throws\ NullPointerException\ If\ list\ is\ empty.\r\n
comment14.params=
comment14.target=java.lang.Object\ getLast()
comment14.text=\r\n\ Returns\ the\ contents\ of\ the\ last\ node\ in\ this\ list.\r\n\ @return\ The\ data\ stored\ in\ the\ last\ node.\r\n
comment15.params=index\ object
comment15.target=void\ set(int,\ java.lang.Object)
comment15.text=\r\n\ Replaces\ the\ contents\ of\ the\ given\ node\ with\ the\ given\ object.\r\n\ @param\ index\ The\ index\ to\ be\ replaced.\r\n\ @param\ object\ The\ new\ object\ to\ occupie\ this\ node.\r\n\ @throws\ IndexOutOfBoundsException\ If\ index\ is\ larger\ than\ list.\r\n
comment2.params=index\ type
comment2.target=void\ add(int,\ java.lang.Object)
comment2.text=\r\n\ Updates\ information\ at\ the\ given\ index\ while\ move\ all\ cells\ past\ the\r\n\ the\ given\ index\ over\ one\ space.\r\n\ @param\ index\ The\ index\ to\ be\ updated.\r\n\ @param\ type\ The\ new\ data\ or\ object\ to\ be\ stored.\r\n\ @return\ Is\ the\ method\ successful.\r\n
comment3.params=index
comment3.target=Node\ getNode(int)
comment4.params=type
comment4.target=void\ addFirst(java.lang.Object)
comment4.text=\r\n\ Add\ the\ first\ element\ to\ the\ list\r\n
comment5.params=type
comment5.target=void\ addLast(java.lang.Object)
comment6.params=index
comment6.target=void\ delete(int)
comment6.text=\r\n\ Delete\ the\ node\ at\ the\ given\ index.\r\n\ @param\ index\ The\ index\ to\ be\ deleted.\r\n\ @throws\ NullPointerException\ If\ list\ is\ empty\ or\ inproper\ index\ is\ \r\n\ used.\r\n
comment7.params=
comment7.target=void\ deleteFirst()
comment7.text=\r\n\ Deletes\ the\ first\ item\ in\ the\ list.\r\n\ @throws\ NullPointerException\ If\ list\ is\ empty.\r\n
comment8.params=
comment8.target=void\ deleteLast()
comment8.text=\r\n\ @throws\ NullPointerException\ If\ list\ is\ empty.\r\n
comment9.params=
comment9.target=int\ size()
comment9.text=\r\n\ Return\ the\ number\ of\ nodes\ in\ this\ list.\r\n\ @return\ The\ number\ of\ nodes.\r\n
numComments=16
